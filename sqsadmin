#!/bin/bash

#
# Helper script for the SQS
# Administration of queues
# 

progdir=${0%/*}
source ${progdir}/sqsconfig

#_______________________________________________________________________________
print_usage() {
  # print usage information
  #
  cat <<EOF
USAGE
  ${0##*/} <command> [<parameter>]

COMMANDS
  list                Show list of queues
  list QUEUE          Show list of tasks in queue QUEUE.
  list QUEUE TASK     Show task TASK

  remove QUEUE TASK   Remove task number TASK from queue QUEUE.
  remove QUEUE all    Remove all tasks from queue QUEUE
  remove QUEUE first  Remove first task from queue QUEUE
  remove QUEUE last   Remove last task from queue QUEUE

  kill QUEUE TASK     Kill processing task number TASK from queue QUEUE
  kill QUEUE all      Kill all processing tasks from queue QUEUE

  renice QUEUE TASK   Set nice level for processing TASK in queue QUEUE
  renice QUEUE        Set nice level for queue QUEUE

  create QUEUE        Create a new (persistent) queue QUEUE
EOF
}

#_______________________________________________________________________________
query() {
  # Helper Q/A-function
  #
  echo -n "${1} "
  read ans
  
  if [[ "x${ans}" = "xy" || "x${ans}" = "xyes" ]] ; then
      return 0
  fi

  return 1
} # query

#_______________________________________________________________________________
sqs_list() {
  # helper function for listing
  # list all queues, if no queue specified
  # 
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
	  list=$(ls ${vardir})
    cnt=$(echo ${list} | wc -w | sed -e "s| ||g")
      
    if [ ${cnt} -eq 0 ] ; then
      echo "No queues in system."
      return
    fi
      
    echo "${cnt} queue(s) in total:"
		for que in ${list} ; do
			sqs_list_queue ${que}
    done
		
		return
  fi

  if ! [ -e "${vardir}/${queue}" ] ; then
    echo "sqsadmin: Error, queue '${queue}' does not exist"
    return
  fi
	
	sqs_list_queue $*

} # sqs_list

#_______________________________________________________________________________
sqs_list_queue() {
  # show contents of a folder in a queue
  # list short description of all folders, if no folder specified
  #
  local queue=${1}
	local folder=${2}
	local item=${3}

	if [ "x${folder}" = "x" ] ; then
		ecnt=$(ls ${vardir}/${queue}/exec | wc -l | sed -e "s| ||g")
    wcnt=$(ls ${vardir}/${queue}/wait | wc -l | sed -e "s| ||g")
    pcnt=$(ls ${vardir}/${queue}/proc | wc -w | sed -e "s| ||g")
    ((tcnt=ecnt+wcnt))
    echo "'${queue}': total ${tcnt}, exec ${ecnt}, wait ${wcnt}, proc ${pcnt}"
		return
	fi

	if [ -e ${vardir}/${queue}/${folder} ] ; then
    cnt=$(ls ${vardir}/${queue}/${folder} | wc -w | sed -e "s| ||g")
		
		case "${folder}" in
			"exec" )
			  if [ ${cnt} -eq 0 ] ; then
				  echo "Queue '${queue}' is not executing any tasks"
					return
				fi    
				echo "Queue '${queue}' is executing ${cnt} task(s):"
				;;
		  "wait" )
				if [ ${cnt} -eq 0 ] ; then
					echo "No waiting tasks in queue '${queue}'"
					return
				fi
				echo "${cnt} task(s) waiting in queue '${queue}':"
				;;
			"proc" )
			  if [ ${cnt} -eq 0 ] ; then
				  echo "No processes in queue '${queue}'"
				  return
			  fi
				echo "Queue '${queue}' has ${cnt} process(es):"   
				;;
		esac
		
		sqs_list_queue_item $*
		return
	fi

	echo "sqsadmin: Error, invalid folder '${folder}'. Must be (exec|wait|proc)!"
	
} # sqs_list_queue

#_______________________________________________________________________________
sqs_list_queue_item() {
  # list items in folder exec/wait/proc.
  # if no item(s) specified, list all available in folder
  #
  local queue=${1}; shift
	local folder=${1}; shift
  local list=$*

	if [ "x${list}" = "x" ] ; then
    list=$(ls ${vardir}/${queue}/${folder} | sort -n)
	fi
 
	for item in ${list} ; do
    case "${item}" in
      "first")
        item=$(ls ${vardir}/${queue}/wait/ | sort -n | head -n 1)
				sqs_list_queue_item ${queue} ${folder} ${item}
				;;
			"last")
				item=$(ls ${vardir}/${queue}/wait/ | sort -n | tail -n 1)
				sqs_list_queue_item ${queue} ${folder} ${item}
				;;
      *)
        if [ -e ${vardir}/${queue}/${folder}/${item} ] ; then
          echo -n "${item}: "
					cat ${vardir}/${queue}/${folder}/${item}
				fi
				;;
		esac
	done
} # sqs_list_queue_item
#_______________________________________________________________________________
sqs_remove() {
  # helper function for remove
  # remove only applies to waiting tasks!
  # 
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

	if [ -e ${vardir}/${queue} ] ; then
    sqs_remove_queue ${*}
  else
	  echo "sqsadmin: Error, queue '${queue}' does not exist!"
  fi
} # sqs_remove

#_______________________________________________________________________________
sqs_remove_queue() {
  # remove tasks from queue
  #
  local queue=${1}; shift
	local task=${*}

  if [ "x${task}" = "x" ] ; then
	   # remove all waiting tasks from queue
		 task="all"
  fi
	
	sqs_remove_task ${queue} ${task}

} # sqs_remove_queue

#_______________________________________________________________________________
sqs_remove_task() {
  # remove specified waiting tasks in queue
  #
  local queue=${1}; shift
  local list=${*}

	for task in ${list} ; do
    case "${task}" in
      "first")
				task=$(ls ${vardir}/${queue}/wait/ | sort -n | head -n 1)
        if query "Remove first waiting task (id=${task}) from queue '${queue}'?" ; then
					sqs_remove_task_noquery ${queue} ${task}
				fi
				;;
			"last")
				task=$(ls ${vardir}/${queue}/wait/ | sort -n | tail -n 1)
        if query "Remove last waiting task (id=${task}) from queue '${queue}'?" ; then
					sqs_remove_task_noquery ${queue} ${task}
				fi
				;;
      "all")
				if query "Remove all waiting task from queue '${queue}'?" ; then
				  sqslock ${vardir}/${queue} 'root'
					tsklist=`ls ${vardir}/${queue}/wait/ | sort -n`		
					for tsk in ${tsklist} ; do
					  sqs_remove_task_noquery ${queue} ${tsk}	
					done
					sqsunlock ${vardir}/${queue} 'root'
					return
				fi
				;;
			[0-9]*)
        if [ ! -e ${vardir}/${queue}/wait/${task} ] ; then
          echo "sqsadmin: Error, no waiting task with id ${task}!"
					continue
				fi
				if query "Remove waiting task ${task} from queue '${queue}'?" ; then
					sqslock ${vardir}/${queue} 'root'
					sqs_remove_task_noquery ${queue} ${task}
					sqsunlock ${vardir}/${queue} 'root'
				fi
				;;
			*)
        echo "sqsadmin: Error, unknown argument '${task}'"
				;;    
		esac
	done
} # sqs_remove_task

#_______________________________________________________________________________
sqs_remove_task_noquery() {
  # Helper function
  # Function does not lock queue, this has to be done by the calling function!
  #
	local queue=${1}
	local task=${2}

	echo -n "Removing ${task}: "
	cat ${vardir}/${queue}/wait/${task}
	rm ${vardir}/${queue}/wait/${task}

} # sqs_remove_task_noquery#_______________________________________________________________________________
sqs_kill() {
  # helper function for remove
  # remove only applies to waiting tasks!
  # 
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

	if [ -e ${vardir}/${queue} ] ; then
    sqs_kill_queue ${*}
  else
	  echo "sqsadmin: Error, queue '${queue}' does not exist!"
  fi
} # sqs_kill

#_______________________________________________________________________________
sqs_kill_queue() {
  # kill tasks in queue
  #
  local queue=${1}; shift
	local task=${*}

  if [ "x${task}" = "x" ] ; then
	   # kill all currently executed tasks in queue
		 task="all"
  fi
	
	sqs_kill_task ${queue} ${task}

} # sqs_kill_queue

#_______________________________________________________________________________
sqs_kill_task() {
  # kill specified executed tasks in queue
  #
  local queue=${1}; shift
  local list=${*}

	for task in ${list} ; do
    case "${task}" in
      "first")
				task=$(ls ${vardir}/${queue}/exec/ | sort -n | head -n 1)
        if query "Kill first task (id=${task}) in queue '${queue}'?" ; then
					sqs_kill_task_noquery ${queue} ${task}
				fi
				;;
			"last")
				task=$(ls ${vardir}/${queue}/exec/ | sort -n | tail -n 1)
        if query "Kill last task (id=${task}) in queue '${queue}'?" ; then
					sqs_kill_task_noquery ${queue} ${task}
				fi
				;;
      "all")
				if query "Kill all tasks in queue '${queue}'?" ; then
				  sqslock ${vardir}/${queue} 'root'
					tsklist=`ls ${vardir}/${queue}/exec/ | sort -n`		
					for tsk in ${tsklist} ; do
					  sqs_kill_task_noquery ${queue} ${tsk}	
					done
					sqsunlock ${vardir}/${queue} 'root'
					return
				fi
				;;
			[0-9]*)
        if [ ! -e ${vardir}/${queue}/exec/${task} ] ; then
          echo "sqsadmin: Error, no task with id ${task}!"
					continue
				fi
				if query "Kill task ${task} from queue '${queue}'?" ; then
					sqslock ${vardir}/${queue} 'root'
					sqs_kill_task_noquery ${queue} ${task}
					sqsunlock ${vardir}/${queue} 'root'
				fi
				;;
			*)
        echo "sqsadmin: Error, unknown argument '${task}'"
				;;    
		esac
	done
} # sqs_kill_task

#_______________________________________________________________________________
sqs_kill_task_noquery() {
  # Helper function
  # Function does not lock queue, this has to be done by the calling function!
  #
	local queue=${1}
	local task=${2}

	echo -n "Would now kill ${task}: "
	cat ${vardir}/${queue}/exec/${task}
	process=$(grep --files-with-matches ${task} ${vardir}/${queue}/proc/*)
	process=${process##*/}
	process=${process##*.}
	echo "Sending kill signal to PID ${process}"
	kill -9 ${process}
} # sqs_kill_task_noquery#_______________________________________________________________________________
sqs_create() {
  # Create a new persistent queue.
  # The queue is only created, not started.
  #
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

  sqs --queue ${queue} --create-only --persistent --verbose

} # sqs_create

#_______________________________________________________________________________
sqs_close() {
  # Close a queue, that is remove it from <vardir>.
  #
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi
	
	sqsclose ${vardir}/${queue}
	
} # sqs_close

#_______________________________________________________________________________
sqs_start() {
  # Start a queue, that is seed runner(s).
  #
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

	echo "sqsadmin: start command not yet implemented"

} # sqs_start

#_______________________________________________________________________________
sqs_stop() {
  # Stop a queue, that is prevent creation of new runner(s).
  #
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

	echo "sqsadmin: stop command not yet implemented"

} # sqs_stop
#_______________________________________________________________________________
# Script entry point
#

# parse options
case "${1}" in
  "")
    print_usage
    ;;
  "help" | "h")
    print_usage
    ;;
  "list" | "ls")
    shift
    sqs_list $*
    ;;
  "remove" | "rm")
    shift
    sqs_remove $*
    ;;
  "kill")
	  shift
    sqs_kill $*
    ;;
  "create" | "c")
    shift
    sqs_create $*
    ;;
  "close")
    shift
    sqs_close $*
		;;
	"start" | "continue" )
    shift
    sqs_start $*
		;;
  "stop")
		shift
		sqs_stop $*
		;;
  "lock")
    echo "sqsadmin: Error, command '${1}' not yet implemented"
    #shift
    #sqs_lock $*
    ;;
  "unlock")
    echo "sqsadmin: Error, command '${1}' not yet implemented"
    #shift
    #sqs_unlock $*
    ;;
  *)
    echo "sqsadmin: Error, unknown command '${1}'"
    print_usage
    exit
    ;;
esac

### EOF