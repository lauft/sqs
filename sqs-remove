#!/bin/bash 

################################################################################
# SQS - a simple queuing system                                                #
# Copyright (C) 2013 by Thomas Lauf                                            #
#                                                                              #
# This file is part of SQS.                                                    #
#                                                                              #
# SQS is free software: you can redistribute it and/or modify                  #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# SQS is distributed in the hope that it will be useful,                       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with SQS.  If not, see <http://www.gnu.org/licenses/>.                 #
#                                                                              #
################################################################################

################################################################################
#                                                                              #
# Helper script for the SQS                                                    #
# Remove a task from the specified queue                                       #
#                                                                              #
# 1 = queue                                                                    #
#                                                                              #
################################################################################

progname=${0%-*}
progdir=${progname%/*}
progbase=${progname#${progdir}}
progbase=${progbase%%-*}

source ${progdir}/${progbase}common

function print_help()
{
  # print help about this command
  cat <<EOF
NAME
       sqs-remove - removes a task from a queue.

SYNOPSIS
       sqs remove QUEUE ID

DESCRIPTION
       Removes task TASK from the given queue QUEUE.
       This command only removes waiting tasks. To terminate active tasks
       use 'sqs kill QUEUE ID'.

OPTIONS
       -h, --help
           Print this help and exit.

   Exit status
       0  if OK,
       1  else.

AUTHOR
       Written by Thomas Lauf (lauf.thomas@tngtech.com)

SQS
       Part of the sqs suite
EOF
}

function print_descr()
{
  # a one-liner about this command
  echo "Remove a task from a queue."
}

#_______________________________________________________________________________
sqs_remove() {
  # helper function for remove
  # remove only applies to waiting tasks!
  #
  local queue=${1}

  if [ "x${queue}" = "x" ] ; then
    echo "sqs-remove: Error, specify queue!"
    return
  fi

  if [ -e ${vardir}/${queue} ] ; then
    sqs_remove_queue ${*}
  else
    echo "sqs-remove: Error, queue '${queue}' does not exist!"
  fi
} # sqs_remove

#_______________________________________________________________________________
sqs_remove_queue() {
  # remove tasks from queue
  #
  local queue=${1}; shift
  local task=${*}

  if [ "x${task}" = "x" ] ; then
     # remove all waiting tasks from queue
     task="all"
  fi

  sqs_remove_task ${queue} ${task}

} # sqs_remove_queue

#_______________________________________________________________________________
sqs_remove_task() {
  # remove specified waiting tasks in queue
  #
  local queue=${1}; shift
  local list=${*}

  for task in ${list} ; do
    case "${task}" in
      "first")
        task=$(ls ${vardir}/${queue}/wait/ | sort -n | head -n 1)
        sqs_remove_task_noquery ${queue} ${task}
        ;;
      "last")
        task=$(ls ${vardir}/${queue}/wait/ | sort -n | tail -n 1)
        sqs_remove_task_noquery ${queue} ${task}
        ;;
      "all")
        tsklist=`ls ${vardir}/${queue}/wait/ | sort -n`
        for tsk in ${tsklist} ; do
          sqs_remove_task_noquery ${queue} ${tsk}
        done
        ;;
      [0-9]*)
        sqs_remove_task_noquery ${queue} ${task}
        ;;
      *)
        abort "sqs-remove: Error, unknown argument '${task}'"
        ;;
    esac
  done
} # sqs_remove_task

#_______________________________________________________________________________
sqs_remove_task_noquery() {
  # Helper function
  # Function does not lock queue, this has to be done by the calling function!
  #
  local queue=${1}
  local task=${2}

  echo -n "Removing ${task}: "
  if [ ! -e ${vardir}/${queue}/wait/${task} ] ; then
    abort "sqs-remove: Error, no waiting task with id ${task}!"
  fi

  cat ${vardir}/${queue}/wait/${task}
  rm ${vardir}/${queue}/wait/${task}

} # sqs_remove_task_noquery

# parse options/arguments
until [ -z "${1}" ] ; do
  case "${1}" in
    --describe)
      print_descr
      exit
      ;;
    --help)
      print_help
      exit
      ;;
    -*)
      abort "Unknown option '${1}'"
      ;;
    *)
      if [ -z "${queue}" ] ; then
	    queue=${1}
      elif [ -z "${id}" ] ; then
	    id=$*
      fi
  esac
  shift
done

###############################################################################
if [[ -z "${queue}" || -z "${id}" ]] ; then
  abort "sqs-remove: wrong argument count: ${queue} ${id}"
fi

if [ ! -d ${vardir} ] ; then
  abort "sqs-remove: cannot access vardir '${vardir}'"
fi

queuedir=${vardir}/${queue}

if [ ! -d ${queuedir} ] ; then
  abort "sqs-remove: queue '${queue}' does not exist"
fi

key=$(hostname).$$
sqsguard lock ${queuedir} $key || abort "sqs-remove: cannot lock queue ${queue}"

info "sqs-remove: remove task ${id} from queue '${queue}'"
sqs_remove ${queue} ${id} || { sqsguard unlock ${queuedir} ${key}; abort "sqs-remove: cannot remove task ${id} from queue '${queue}'"; }

sqsguard unlock ${queuedir} ${key} || abort "sqs-remove: cannot unlock queue ${queue}"

exit ${E_SUCCESS}

### EOF
