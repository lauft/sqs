#!/bin/bash

#
# Helper script for the SQS
# Administration of queues
# 

progdir=${0%/*}
source ${progdir}/sqsconfig

#_______________________________________________________________________________
print_usage() {
  # print usage information
  #
  cat <<EOF
USAGE
  ${0##*/} <command> [<parameter>]

COMMANDS
  list                Show list of queues
  list QUEUE          Show list of tasks in queue QUEUE.
  list QUEUE TASK     Show task TASK

  remove QUEUE TASK   Remove task number TASK from queue QUEUE.
  remove QUEUE all    Remove all tasks from queue QUEUE
  remove QUEUE first  Remove first task from queue QUEUE
  remove QUEUE last   Remove last task from queue QUEUE
EOF
}

#_______________________________________________________________________________
sqs_list() {
  # helper function for listing
  # list all queues, if no queue specified
  # 
  local queue=${1}
  local task=${2}
    
  if [ "x${queue}" = "x" ] ; then
      queue="all"
  fi

  if [ "x${task}" = "x" ] ; then
      sqs_list_queue ${queue}
  else
      sqs_list_task ${queue} ${task}
  fi
} # sqs_list

#_______________________________________________________________________________
sqs_list_queue() {
  # show overview of queue(s)
  #
  local queue=${1}

  case "${queue}" in
    "all")
      list=`ls ${vardir}`
      cnt=`echo ${list} | wc -w`
      
      if [ ${cnt} -eq 0 ] ; then
	echo "no queues in system."
	return
      fi
      
      echo "${cnt} queue(s) in total"
	  
      for que in ${list} ; do
        #execcnt=`ls ${vardir}/${que}/exec | wc -w`
	#proccnt=`ls ${vardir}/${que}/proc | wc -w`
	#waitcnt=`ls ${vardir}/${que}/wait | wc -w`
	waitcnt=`ls ${vardir}/${que} | wc -w`
	echo "${que}: exec XX wait ${waitcnt} proc PP"
      done
      ;;
    *)
      if ! [ -e "${vardir}/${queue}" ] ; then
	echo "sqsadmin: Error, queue '${queue}' does not exist"
	return
      fi
      
      waitcnt=`ls ${vardir}/${queue} | wc -l`
      
      cat <<EOF 
- processes
- task(s) excecuting
${waitcnt} task(s) waiting
${waitcnt} task(s) in total
EOF
	  
      ;;
  esac	  
} # sqs_list_queue

#_______________________________________________________________________________
sqs_list_task() {
  # list tasks in queue
  #
  local queue=${1}
  local task=${2}
  
  case "${task}" in
    "first")
      echo "sqsadmin: Would now show first task from queue '${queue}'"
      ;;
    "last")
      echo "sqsadmin: Would now show last task from queue '${queue}'"
      ;;
    "all")
      echo "Listing all tasks in queue '${queue}'"
      echo "Currently executing:"
      echo "--"
      
      list=`ls ${vardir}/${queue}/ | sort -n`
      
      echo "Waiting tasks:"
      for tsk in ${list} ; do
	echo -n "${tsk}: "
	cat ${vardir}/${queue}/${tsk}
      done
      ;;
    [0-9]*)
      echo -n "${task}: "
      cat ${vardir}/${queue}/${task}
      ;;
    *)
      echo "sqsadmin: Error, unknown argument '${task}'"
      ;;	  
  esac
} # sqs_list_task

#_______________________________________________________________________________
sqs_remove() {
  # helper function for remove
  # 
  local queue=${1}
  local task=${2}
    
  if [ "x${queue}" = "x" ] ; then
      queue="all"
  fi

  if [ "x${task}" = "x" ] ; then
      sqs_remove_queue ${queue}
  else
      sqs_remove_task ${queue} ${task}
  fi
} # sqs_remove

#_______________________________________________________________________________
sqs_remove_queue() {
  # remove task from queue
  #
  local queue=${1}
  local task=${2}

  if [ "x${queue}" = "x" ] ; then
    echo "sqsadmin: Error, specify queue!"
    return
  fi

  if [ "x${task}" = "x" ] ; then
    echo "sqsadmin: Error, specify task number!"
    return

  elif [ "x${task}" = "xall" ] ; then
    echo "sqsadmin: Would now remove all tasks from queue '${queue}'"

  elif [ "x${task}" = "xfirst" ] ; then
    echo "sqsadmin: Would now remove first task from queue '${queue}'"

  elif [ "x${task}" = "xlast" ] ; then
    echo "sqsadmin: Would now remove last task from queue '${queue}'"

  else
    echo "sqsadmin: Would now remove task ${task} from queue '${queue}'"

  fi
}


#_______________________________________________________________________________
# Script entry point
#

# parse options
case "${1}" in
    "")
	print_usage
	;;
    "help" | "h")
	print_usage
	;;
    "list" | "ls")
	shift
	sqs_list $*
	;;
    "remove" | "rm")
	shift
	sqs_remove $*
	;;
    "lock")
	echo "sqsadmin: Error, command '${1}' not yet implemented"
	#shift
        #sqs_lock $*
	;;
    "unlock")
	echo "sqsadmin: Error, command '${1}' not yet implemented"
	#shift
        #sqs_unlock $*
	;;
    "stop")
	echo "sqsadmin: Error, command '${1}' not yet implemented"
	#shift
        #sqs_stop $*
	;;
    "continue")
	echo "sqsadmin: Error, command '${1}' not yet implemented"
	#shift
        #sqs_continue $*
        ;;
    "kill")
	echo "sqsadmin: Error, command '${1}' not yet implemented"
	#shift
        #sqs_kill $*
	;;
    *)
	echo "sqsadmin: Error, unknown command '${1}'"
	print_usage
esac
