#!/bin/bash

################################################################################
# SQS - a simple queuing system                                                #
# Copyright (C) 2011, 2012 by Thomas Lauf                                      #
#                                                                              #
# This file is part of SQS.                                                    #
#                                                                              #
# SQS is free software: you can redistribute it and/or modify                  #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# SQS is distributed in the hope that it will be useful,                       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with SQS.  If not, see <http://www.gnu.org/licenses/>.                 #
#                                                                              #
################################################################################

################################################################################
#                                                                              #
# Helper script for the SQS                                                    #
# Retrieves sucessively tasks from queue and waits for their completion        #
#                                                                              #
################################################################################

verbose="yes"

#_______________________________________________________________________________
sqsr_add_to_runc()
{
  # add parameter to runner count
  # helper function used to increment or decrement runner count,
  # current runner count is returned.
  #
  local nrun=$(sqs get ${queue}/info/hosts ${host} 0)
  nrun=${nrun#*:}
  if [ ${1} -ne 0 ] ; then
    ((nrun=nrun+${1}))
    sqs set ${queue}/info/hosts ${host} ${nrun}
  fi
  echo ${nrun}
  return
}

################################################################################
# script entry point
#
if [ $# -ne 1 ] ; then
  echo "sqsrunner ($$): wrong argument count! ($*) [$(hostname)]"
  exit 1
fi

queue=${1}

if ! [ -e ${queue} ] ; then
  echo "sqsrunner ($$): queue '${queue}' does not exist! [${host}]"
  exit 2
fi

host=$(hostname)
key="${host}.$$"

sqsguard lock ${queue} ${key} || exit $?

if [ "x${verbose}" = "xyes" ] ; then
  echo "sqsrunner ($$): starting on ${host}."
fi

# retrieve first task from queue
tid=$(ls ${queue}/wait 2>/dev/null | sort -n | head -n 1)
  
if [ "x${tid}" != "x" ] ; then
  # read task
  task=$(cat ${queue}/wait/${tid})
    
  # retrieve nice level of queue for host
  nlvl=$(sqs get ${queue}/info/nice ${host} 0)
  
  # retrieve ionice level of queue for host
  #iolv=$(sqs get ${queue}/info/ionice ${host} 0)
  
  # move task to exec
  mv -f ${queue}/wait/${tid} ${queue}/exec/
  
  if [ "x${verbose}" = "xyes" ] ; then
    echo "sqsrunner ($$): executing task ${tid}: '${task}' (nice ${nlvl}) [${host}]"
  fi
  
  # start task
  nice -n ${nlvl} ${task} &
  pid=$!
  
  # update proc
  echo "${tid}" > ${queue}/proc/${host}.${pid}
  
  sqsguard unlock ${queue} ${key} || exit $?
  
  # wait for completion
  wait ${pid}
  
  # remove completed task
  sqsguard lock ${queue} ${key} || exit $?
  rm -f ${queue}/exec/${tid}
  rm -f ${queue}/proc/${host}.${pid}

  # decrement runner count
  nrun=$(sqsr_add_to_runc -1)

else
  if [ "x${verbose}" = "xyes" ] ; then
    echo "sqsrunner ($$): no more tasks in list [${host}]"
  fi
fi

sqsguard unlock ${queue} ${key} || exit $?

sqsdispatch ${queue} &

if [ "x${verbose}" = "xyes" ] ; then
  echo "sqsrunner ($$): exiting on ${host}"
fi
    
### EOF
