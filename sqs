#!/bin/bash

base="${HOME}/Desktop/sqs/var/sqs"
queue=""
master="no"
maxproc=1
dryrun="no"
targets=""
call=""

#_______________________________________________________________________________
usage(){
PROGNAME=$(basename $0)
cat << EOF
$PROGNAME: a simple queuing system.

Usage: $PROGNAME [OPTIONS] --call <name> TARGETS

Options:
  --call     define the program call

  --queue    specify the name of the queue
  
  --nproc    maximum number of parallel processes (only if master)

  --logfile  redirect output of each process to a logfile '<target>.log'

  --dry-run  do not process anything, just print what would happen

  --quiet    suppress informational output
EOF
exit
}

# Parsing options
while [ ${1:q} ]; do
		case "${1}" in
				--call )
						shift
						call=${1}
						;;
				--queue )
						shift
						queue=${1}
						;;
				--nproc )
						shift
						maxproc=${1}
						;;
				--logfile )
						echo "logfile option not yet supported!"
						;;
				--dry-run )
						dryrun="yes"
						;;
				--quiet )
						echo "quiet option not yet supported!"
						#quiet="yes"
						;;
				-h )
						usage
						exit
						;;
				--help )
						usage
						exit
						;;
				-* )
						echo "unknown option $1"
						usage
						exit
						;;
				* )
						targets="${targets} ${1}"
						;;
		esac
		shift		
done

################################################################################
# script entry point
#
if [ -z "${call}" ] ; then
	echo "sqs: no call specified!"
	usage
  exit 1
fi

if ! which ${call%% *} >/dev/null 2>&1 ; then
	echo "sqs: program call '${call%% *}' is not accessible!"
	exit 2
fi

# create queue name if not yet specified
if [ -z ${queue} ] ; then
	queue=${call##*/}
	queue=${call%% *}
fi

# build tasklist
for target in ${targets} ; do
		tasklist="${tasklist};${call} ${target}"
done

tasklist=${tasklist#;}

# if dry run, stop here
if [ "x${dryrun}" = "xyes" ] ; then
		echo "call : ${call}"
		echo "queue: ${queue}"
		echo "runs : ${maxproc}"
		echo "tasks: ${tasklist}" | sed -e "s|;|\n       |g"
		exit 0
fi

# TODO: add traps

./sqslock ${base}

echo "sqs: checking for queue ${base}/${queue}"
if [ -e "${base}/${queue}" ] ; then
	echo "I am a slave!"

else 
	echo "I am the master"
	master="yes"
	mkdir ${base}/${queue}

fi

./sqslock ${base}/${queue}
./sqsunlock ${base}

i=`ls ${base}/${queue} | grep -v "lockfile" | sort -n | tail -n 1`

if [ "${i}" = "" ] ; then
	i=-1
else
	echo "sqs: last task in queue: '${i}'"
fi

((i++))

separator=$IFS
IFS=";"

for task in ${tasklist} ; do
	echo "sqs: add task ${i} '${task}'"
	echo ${task} > ${base}/${queue}/${i}
	((i++))
done

IFS=${separator}

./sqsunlock ${base}/${queue}

#
if [ "x${master}" = "xyes" ] ; then
		nproc=0
		
		echo "sqs: starting processes"
		while [ ${nproc} -lt ${maxproc} ] ; do
				./sqsrunner ${base}/${queue} &
				((nproc++))
		done

		wait

		./sqslock ${base}
		./sqslock ${base}/${queue}

		# TODO: check whether queue is empty
		
		echo "sqs: closing queue '${base}/${queue}'"
		rm -r ${base}/${queue}
		./sqsunlock ${base}
fi

echo "sqs: finished!"
